{"version":3,"sources":["payment/PhoneField.js","payment/PayField.js","payment/Payment.js","payment/Animation.js","context.js","operators_components/Sim.js","operators_components/SimList.js","operators_components/Operators.js","App.js","serviceWorker.js","index.js"],"names":["PhoneField","handleChangeNumber","className","type","id","maxLength","onChange","e","PayField","name","fieldValueBeforeAfterDot","target","value","split","dotDuplicate","replace","search","Number","parseInt","trim","undefined","length","slice","validating","Payment","prop","React","useState","phone","setPhone","operationResult","setOperationResult","alertMessage","setAlertMessage","submitHandler","event","money","document","getElementById","number","join","preventDefault","setAttribute","querySelectorAll","forEach","el","setTimeout","Math","round","random","start","Date","now","timer","setInterval","timePassed","style","top","console","log","clearInterval","showResultOperationWindow","removeAttribute","onSubmit","operator","currentId","getAttribute","currentMaxLength","currentLength","fieldValue","nextInput","String","prevInput","push","focus","pop","Context","createContext","Sim","simName","setStatus","useContext","onClick","SimList","props","operators","map","currentOperator","key","Operators","choiceMade","isSelected","setOperators","Provider","currentSim","App","setOperator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84326099.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction PhoneField({handleChangeNumber}) {\r\n    return (\r\n        <div className=\"maskedInput phone\">\r\n            +7(<input type=\"text\" id=\"1\" maxLength=\"3\" onChange={(e) => handleChangeNumber(e)}\r\n                      className=\"num clean\"/>)\r\n            <input type=\"text\" id=\"2\" maxLength=\"3\" onChange={(e) => handleChangeNumber(e)}\r\n                   className=\"num clean\"/>\r\n            -<input type=\"text\" id=\"3\" maxLength=\"2\" onChange={(e) => handleChangeNumber(e)}\r\n                    className=\"num-short clean\"/>\r\n            -<input type=\"text\" id=\"4\" maxLength=\"2\" onChange={(e) => handleChangeNumber(e)}\r\n                    className=\"num-short clean\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhoneField","import React from \"react\";\r\n\r\nfunction PayField() {\r\n    function validating(e) {\r\n        let fieldValueBeforeAfterDot = e.target.value.split(\".\");\r\n        let bannedSymbols = /[\\sA-я^!@#$%&*()_/?<>:;,\"'\\-=]/i;\r\n        let bannedSymbolsWithoutWhitespace = /[A-я^!@#$%&*()_/?<>:;,\"'\\-=]/i;\r\n        let dotDuplicate = /[\\D][\\d]*[\\D]/;\r\n        let dotInStart = /[\\d][\\D][\\d][\\s][\\d][\\d]/;\r\n\r\n        e.target.value = e.target.value.replace(bannedSymbols, \"\");\r\n        if (e.target.value.search(dotDuplicate) !== -1) {\r\n            e.target.value = e.target.value.replace(dotDuplicate, \".\");\r\n        }\r\n\r\n        if (Number.parseInt(e.target.value) === 0) {\r\n            e.target.value = 1;\r\n        }\r\n\r\n        if (Number.parseInt(e.target.value.trim()) >= 1000) {\r\n            e.target.value = \"1 000\";\r\n        } else {\r\n            e.target.value.replace(/\\s/, \"\");\r\n        }\r\n        if (fieldValueBeforeAfterDot[1] !== undefined) {\r\n\r\n            if (fieldValueBeforeAfterDot[0] === \"\") {\r\n                e.target.value = \"1.\" + fieldValueBeforeAfterDot[1];\r\n            }\r\n            if (fieldValueBeforeAfterDot[1].length > 2) {\r\n                e.target.value = e.target.value.slice(0, -1);\r\n            }\r\n        }\r\n        if (e.target.value.search(dotInStart) !== -1) {\r\n            e.target.value = 1.10;\r\n        }\r\n\r\n        e.target.value = e.target.value.replace(bannedSymbolsWithoutWhitespace, \"\");\r\n    }\r\n\r\n    return (\r\n        <input type=\"text\" name=\"money\" className=\"maskedInput money clean\" id=\"payField\"\r\n               onChange={(e) => validating(e)}/>\r\n    )\r\n}\r\n\r\nexport default PayField;","import React from \"react\";\r\nimport \"../styles/Payment.css\";\r\nimport PhoneField from './PhoneField';\r\nimport PayField from './PayField';\r\nimport showResultOperationWindow from \"./Animation\";\r\n\r\nfunction Payment(prop) {\r\n    let [phone, setPhone] = React.useState([\"+7\"]);\r\n    const [operationResult, setOperationResult] = React.useState(null)\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\")\r\n\r\n    function sendToServer() {\r\n        return Math.round(Math.random());\r\n    }\r\n\r\n    function handleChangeNumber(e) {\r\n        let currentId = Number.parseInt(e.target.getAttribute(\"id\"));\r\n        let currentMaxLength = Number.parseInt(e.target.getAttribute(\"maxlength\"));\r\n        let currentLength = e.target.value.length;\r\n        let fieldValue = e.target.value;\r\n        let bannedSymbols = /[\\s\\D,A-я^!@#$%&*()_/?<>:;\"'\\-=]/i;\r\n        let nextInput = document.getElementById(String(currentId + 1));\r\n        let prevInput = document.getElementById(String(currentId - 1));\r\n\r\n        if (fieldValue.search(bannedSymbols) !== -1) {\r\n            e.target.value = fieldValue.slice(0, -1);\r\n        }\r\n        if (currentLength === currentMaxLength) {\r\n            phone.push(fieldValue);\r\n            setPhone(phone);\r\n            nextInput !== null && nextInput.focus();\r\n        } else if (currentLength === 0) {\r\n            phone.pop();\r\n            setPhone(phone);\r\n            prevInput !== null && prevInput.focus();\r\n        }\r\n\r\n    }\r\n\r\n    function submitHandler(event) {\r\n        let money = document.getElementById(\"payField\").value;\r\n        let number = phone.join(\"\");\r\n\r\n        event.preventDefault();\r\n        document.getElementById('sendButton').setAttribute('disabled', \"disabled\");\r\n        if (number.length !== 12 || money === \"\") {\r\n            setOperationResult(\"fail\")\r\n            setAlertMessage(\"Произошла ошибка! Данные введены некорректно.\")\r\n            setPhone([\"+7\"]);\r\n            document.querySelectorAll('input.clean').forEach(el => el.value = \"\");\r\n            setTimeout(setOperationResult, 2000, null);\r\n        } else {\r\n            if (sendToServer()) {\r\n                setOperationResult(\"success\");\r\n                setAlertMessage(\"Оплата прошла успешно!\");\r\n                setTimeout(\"window.location.replace('/mobile-payment')\", 1500);\r\n            } else {\r\n                setOperationResult(\"fail\")\r\n                setAlertMessage(\"Произошла ошибка! Повторите операцию.\")\r\n                setTimeout(setOperationResult, 1500, null);\r\n            }\r\n        }\r\n        showResultOperationWindow();\r\n        setTimeout(() => document.getElementById('sendButton').removeAttribute('disabled'), 1500);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"background\"/>\r\n            {operationResult !== null &&\r\n            <div className={operationResult} id=\"resultOperationWindow\">{alertMessage}</div>}\r\n            <form className=\"bodyWrapper\" id=\"form\" onSubmit={(e) => submitHandler(e)}>\r\n                <div className=\"header\">\r\n                    <h1>Перевод средств</h1>\r\n                    <h2>{prop.operator}</h2>\r\n                </div>\r\n                <div className=\"params\">\r\n                    <label className=\"inputElement\">\r\n                        Укажите номер телефона: <PhoneField handleChangeNumber={handleChangeNumber}/>\r\n                    </label>\r\n                    <label className=\"inputElement\">\r\n                        Укажите необходимую сумму(Руб.): <PayField/>\r\n                    </label>\r\n                </div>\r\n                <div className=\"btnWrapper\">\r\n                    <button className=\"btn paybtn\" id=\"sendButton\">Оплатить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Payment;","export default function showResultOperationWindow() {\r\n    let start = Date.now();\r\n    let timer = setInterval(() => {\r\n        let timePassed = Date.now() - start;\r\n        try {\r\n            document.getElementById(\"resultOperationWindow\").style.top = timePassed / 5 + 'px';\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        if (timePassed / 5 > 100) {\r\n            clearInterval(timer);\r\n        }\r\n    }, 10);\r\n\r\n\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\nexport default Context;","import React, {useContext} from \"react\";\r\nimport Context from \"../context\";\r\n\r\nfunction Sim({simName}) {\r\n    const {setStatus} = useContext(Context);\r\n    return (\r\n        <button className=\"simField btn\" onClick={() => setStatus({simName})}>\r\n            {simName}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Sim;","import React from \"react\";\r\nimport Sim from \"./Sim\";\r\n\r\nfunction SimList(props) {\r\n    return(\r\n        <div className=\"simList\">\r\n            {props.operators.map(currentOperator=>{\r\n                return <Sim simName={currentOperator.simName} key={currentOperator.simName}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default SimList;\r\n","import React from 'react';\r\nimport '../styles/Operators.css';\r\nimport '../styles/Payment.css';\r\nimport Context from \"../context\";\r\nimport SimList from \"../operators_components/SimList\";\r\n\r\nfunction Operators({choiceMade}) {\r\n    let [operators, setOperators] = React.useState([\r\n            {simName: \"МТС\", isSelected: false},\r\n            {simName: \"Билайн\", isSelected: false},\r\n            {simName: \"Мегафон\", isSelected: false},\r\n        ]\r\n    );\r\n\r\n\r\n    function setStatus(simName) {\r\n        choiceMade(simName);\r\n        setOperators(\r\n            operators.map(currentSim => {\r\n                if (currentSim.simName === simName) {\r\n                    currentSim.isSelected = !currentSim.isSelected;\r\n                }\r\n                return currentSim;\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"background\"/>\r\n            <div className=\"bodyWrapper\">\r\n                <Context.Provider value={{setStatus}}>\r\n                    <h1 className=\"operChoice\">Выберите оператора</h1>\r\n                    <SimList operators={operators}/>\r\n                </Context.Provider>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Operators\r\n","import React from 'react';\nimport Payment from \"./payment/Payment\";\nimport Operators from \"./operators_components/Operators\";\n\n\nfunction App() {\n    const [operator, setOperator] = React.useState(\"\");\n\n    function choiceMade({simName}) {\n        setOperator(simName)\n    }\n\n    return (\n        operator === \"\" ? <Operators choiceMade={choiceMade}/> : <Payment operator={operator}/>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}